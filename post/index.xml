<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Esoterically Typed</title>
    <link>https://leshow.github.io/post/</link>
    <description>Recent content in Posts on Esoterically Typed</description>
    <generator>Hugo -- gohugo.io</generator>
    <managingEditor>cameron.evan@gmail.com (Evan Cameron)</managingEditor>
    <webMaster>cameron.evan@gmail.com (Evan Cameron)</webMaster>
    <lastBuildDate>Tue, 18 Feb 2020 10:23:50 -0500</lastBuildDate>
    
	<atom:link href="https://leshow.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Rust for Java Devs</title>
      <link>https://leshow.github.io/post/rust_for_java_devs/</link>
      <pubDate>Tue, 18 Feb 2020 10:23:50 -0500</pubDate>
      <author>cameron.evan@gmail.com (Evan Cameron)</author>
      <guid>https://leshow.github.io/post/rust_for_java_devs/</guid>
      <description>I&amp;rsquo;d like to take a change for this blog and leave the more bleeding edge topics to focus on perhaps one of the most important things one can do in the Rust community: teaching new Rust developers. I&amp;rsquo;ve been thinking about how best to approach teaching Rust to those used to working with Java, in order to bring a group of developers up to speed with the language for a new project.</description>
    </item>
    
    <item>
      <title>Rotary Encoders in Embedded Rust</title>
      <link>https://leshow.github.io/post/rotary_encoder_hal/</link>
      <pubDate>Wed, 16 Oct 2019 20:31:51 -0400</pubDate>
      <author>cameron.evan@gmail.com (Evan Cameron)</author>
      <guid>https://leshow.github.io/post/rotary_encoder_hal/</guid>
      <description>Recently, I&amp;rsquo;ve been trying to learn more about electronics and embedded development. Maybe I&amp;rsquo;m just tired of operating purely in the virtual, but there&amp;rsquo;s something cool about being able to physically put together a circuit and push a button to make something happen. I went through the usual Arduino resources before seeing what Rust had to offer. I&amp;rsquo;m happy to report there&amp;rsquo;s some really good material out there.
 Discovery book Rust Embedded book Real Time For the Masses  If you&amp;rsquo;re new to embedded (but not new to Rust), I&amp;rsquo;d recommend the Discovery book as your jumping off point.</description>
    </item>
    
    <item>
      <title>Updating to Async/Await</title>
      <link>https://leshow.github.io/post/async_await/</link>
      <pubDate>Mon, 12 Aug 2019 09:30:08 -0400</pubDate>
      <author>cameron.evan@gmail.com (Evan Cameron)</author>
      <guid>https://leshow.github.io/post/async_await/</guid>
      <description>Unless you&amp;rsquo;ve been living under a rock; you know async/await is coming to rust stable. My last post was about implementing a simple protocol using manual futures, and interacting with tokio. It&amp;rsquo;s only fitting, then, that I update the lib that post was inspired by to async/await and report back on my findings. If you&amp;rsquo;re curious about my library or you use the window manager i3, it&amp;rsquo;s available here or on crates under tokio-i3ipc.</description>
    </item>
    
    <item>
      <title>Protocols in Tokio (i3 IPC)</title>
      <link>https://leshow.github.io/post/impl_proto_tokio/</link>
      <pubDate>Mon, 08 Apr 2019 18:53:18 -0400</pubDate>
      <author>cameron.evan@gmail.com (Evan Cameron)</author>
      <guid>https://leshow.github.io/post/impl_proto_tokio/</guid>
      <description>There&amp;rsquo;s a dearth of blog posts online that cover the details of implementing a custom protocol in tokio, at least that I&amp;rsquo;ve found. I&amp;rsquo;m going to cover some of the steps I went through in implementing an async version i3wm&amp;rsquo;s IPC. Granted, I&amp;rsquo;ve not finished my library to a point I&amp;rsquo;m comfortable releasing it, but I hope I can provide some examples for the aspiring async IO enthusiast that I wish I had when I started.</description>
    </item>
    
    <item>
      <title>Unit Type Params</title>
      <link>https://leshow.github.io/post/unit_type_pattern/</link>
      <pubDate>Mon, 10 Sep 2018 12:28:03 -0400</pubDate>
      <author>cameron.evan@gmail.com (Evan Cameron)</author>
      <guid>https://leshow.github.io/post/unit_type_pattern/</guid>
      <description>Updated: The cs140e hosted on Stanford&amp;rsquo;s servers is down, but Sergio has helpfully put up an archived copy here. I&amp;rsquo;ve changed the links in this post to reflect that.
I always enjoy reading blogs about patterns or tricks people have picked up writing Rust. I&amp;rsquo;ve seen this a few times but not read about it anywhere.
I&amp;rsquo;ve been doing class assignments from Operating Systems cs140e. I highly recommend this class if you know a bit of Rust and would like to try writing some lower level code.</description>
    </item>
    
  </channel>
</rss>